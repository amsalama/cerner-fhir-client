<channel version="3.4.0">
  <id>efe360e4-74b6-43aa-bee9-67bf2da6fe32</id>
  <nextMetaDataId>6</nextMetaDataId>
  <name>Cerner - open endpoint</name>
  <description>Request a Conformance resource from Cerner&apos;s open endpoint.
</description>
  <enabled>true</enabled>
  <lastModified>
    <time>1461615795281</time>
    <timezone>America/Los_Angeles</timezone>
  </lastModified>
  <revision>6</revision>
  <sourceConnector version="3.4.0">
    <metaDataId>0</metaDataId>
    <name>sourceConnector</name>
    <properties class="com.mirth.connect.connectors.vm.VmReceiverProperties" version="3.4.0">
      <pluginProperties/>
      <sourceConnectorProperties version="3.4.0">
        <responseVariable>None</responseVariable>
        <respondAfterProcessing>true</respondAfterProcessing>
        <processBatch>false</processBatch>
        <firstResponse>false</firstResponse>
        <processingThreads>1</processingThreads>
        <resourceIds class="linked-hash-map">
          <entry>
            <string>Default Resource</string>
            <string>[Default Resource]</string>
          </entry>
        </resourceIds>
        <queueBufferSize>1000</queueBufferSize>
      </sourceConnectorProperties>
    </properties>
    <transformer version="3.4.0">
      <steps/>
      <inboundTemplate encoding="base64">TVNIfF5+XCZ8QURUMXxHT09EIEhFQUxUSCBIT1NQSVRBTHxHSEggTEFCLCBJTkMufEdPT0QgSEVB
TFRIIEhPU1BJVEFMfDE5ODgwODE4MTEyNnxTRUNVUklUWXxBRFReQTA4XkFEVF9BMDF8TVNHMDAw
MDF8UHwyLjYKRVZOfEEwOHwyMDE1MDgxODExMjMKUElEfDF8fFBBVElEMTIzNF5eXkdPT0QgSEVB
TFRIIEhPU1BJVEFMXk1SXkdPT0QgSEVBTFRIIEhPU1BJVEFMfjEyMzQ1Njc4OV5eXlVTU1NBXlNT
fHxFVkVSWU1BTl5BREFNXkF8fDE5NTYwMTI5fE18fHwyMjIyIEhPTUUgU1RSRUVUXl5JU0hQRU1J
TkdeTUleNDk4NDleVVNBXkheXldBfHwoNTU1KSAyMzItNjUyM3woNTU1KSAzNTQtMjAwNHxlbnxN
fHw5OTk5OV5eXkdPT0QgSEVBTFRIIEhPU1BJVEFMXkFOfHx8fHx8fHx8fHx8fHx8fHx8fHx8fF5Q
UlNeUEheXl41NTVeMjMyNjUyM35eV1BOXlBIXl5eNTU1XjM1NDIwMDR+XlBSTl5JbnRlcm5ldF5h
LmV2ZXJ5bWFuQHNvbWV3aGVyZS5jb20KTksxfDF8TlVDTEVBUl5ORUxEQX5FVkVSWU1BTl5ORUxE
QXxTUE9eU1BPVVNFfDIyMjIgSE9NRSBTVFJFRVReXklTSFBFTUlOR15NSV40OTg0OV5VU0FeSF5e
V0F8KDU1NSkgMjMyLTY1MjN8KDU1NSkgMzMzLTg5NTZ8Q15FTUVSR0VOQ1kgQ09OVEFDVF5ITDcw
MTMxfHx8T2ZmaWNlIEFkbWluaXN0cmF0b3J8MV5GXkFkbWluaXN0cmF0b3J8fEFBIFNFUlZJQ0Ug
SU5DfE18RnwxOTYwMDQxNXxVXlVua25vd25eSEw3MDIyM3x8fGVufHx8fHx8QVRPTUlDfHx8fHx8
fHxQXlBlcm1hbmVudHx8fHx8fF5QUlNeUEheXl41NTVeMjMyNjUyM35eV1BOXlBIXl5eNTU1XjMz
Mzg5NTZeMQpOSzF8MnxHVUxJWklPXk5BVEhBTklFTF5TQU1NSUV8R1JEXkd1YXJkaWFuXkhMNzAw
NjN8fCg3MjgpMjI0LTY1MDh8fEN8fHx8fHx8fHx8fHx8ZW58fHx8fHx8fHx8fHx8fHx8fHx8fF5X
UE5eUEheXl43MjheMjI0NjUwOH5eUFJOXkludGVybmV0Xm5hdGhhbmllbC5ndWxpemlvQHNvbWV3
aGVyZS5jb20KUFYxfDF8SXwyMDAwXjIwMTVeMDl8fHx8MDA0Nzc3XkFUVEVORF5BQVJPTl5BfHx8
U1VSfHx8fEFETXxBMA==</inboundTemplate>
      <inboundDataType>XML</inboundDataType>
      <outboundDataType>XML</outboundDataType>
      <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </inboundProperties>
      <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
        <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
          <stripNamespaces>true</stripNamespaces>
        </serializationProperties>
        <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
          <splitType>Element_Name</splitType>
          <elementName></elementName>
          <level>1</level>
          <query></query>
          <batchScript></batchScript>
        </batchProperties>
      </outboundProperties>
    </transformer>
    <filter version="3.4.0">
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <waitForPrevious>true</waitForPrevious>
  </sourceConnector>
  <destinationConnectors>
    <connector version="3.4.0">
      <metaDataId>1</metaDataId>
      <name>Conformance query</name>
      <properties class="com.mirth.connect.connectors.http.HttpDispatcherProperties" version="3.4.0">
        <pluginProperties/>
        <destinationConnectorProperties version="3.4.0">
          <queueEnabled>false</queueEnabled>
          <sendFirst>false</sendFirst>
          <retryIntervalMillis>5000</retryIntervalMillis>
          <regenerateTemplate>true</regenerateTemplate>
          <retryCount>5</retryCount>
          <rotate>false</rotate>
          <includeFilterTransformer>true</includeFilterTransformer>
          <threadCount>1</threadCount>
          <threadAssignmentVariable></threadAssignmentVariable>
          <validateResponse>false</validateResponse>
          <resourceIds class="linked-hash-map">
            <entry>
              <string>Default Resource</string>
              <string>[Default Resource]</string>
            </entry>
          </resourceIds>
          <queueBufferSize>1000</queueBufferSize>
        </destinationConnectorProperties>
        <host>${URL}</host>
        <useProxyServer>false</useProxyServer>
        <proxyAddress></proxyAddress>
        <proxyPort></proxyPort>
        <method>get</method>
        <headers class="linked-hash-map">
          <entry>
            <string>Accept</string>
            <list>
              <string>application/json</string>
            </list>
          </entry>
        </headers>
        <parameters class="linked-hash-map"/>
        <responseXmlBody>true</responseXmlBody>
        <responseParseMultipart>true</responseParseMultipart>
        <responseIncludeMetadata>true</responseIncludeMetadata>
        <responseBinaryMimeTypes>application.*(?&lt;!json|xml)</responseBinaryMimeTypes>
        <responseBinaryMimeTypesRegex>true</responseBinaryMimeTypesRegex>
        <multipart>false</multipart>
        <useAuthentication>false</useAuthentication>
        <authenticationType>Basic</authenticationType>
        <usePreemptiveAuthentication>false</usePreemptiveAuthentication>
        <username></username>
        <password></password>
        <content></content>
        <contentType>text/plain</contentType>
        <dataTypeBinary>false</dataTypeBinary>
        <charset>UTF-8</charset>
        <socketTimeout>30000</socketTimeout>
      </properties>
      <transformer version="3.4.0">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>FHIR resource URL</name>
            <script>var url = $(&quot;openCerner&quot;) + &quot;/metadata&quot;;

channelMap.put(&quot;URL&quot;, url);</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>var url = $(&quot;openCerner&quot;) + &quot;/metadata&quot;;

channelMap.put(&quot;URL&quot;, url);</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </transformer>
      <responseTransformer version="3.4.0">
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Check HTTP status code</name>
            <script>try {

	var resp =  $(&apos;responseStatusLine&apos;);

// HTTP 2xx  
	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

// HTTP 4xx		
	} else if (isHttpCode4xx(resp)) {	
		processHTTPErrorCodes(resp);	
		responseStatus = ERROR;
		
// HTTP 5xx		
	} else if (isHttpCode5xx(resp)) {			
		processHTTPErrorCodes(resp);
		responseStatus = ERROR;		

// HTTP 3xx and others		
	} else {	
		logger.error(&quot;HTTP response status code is unknown: &quot; + resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>try {

	var resp =  $(&apos;responseStatusLine&apos;);

// HTTP 2xx  
	if (isHttpCode2xx(resp)) {	
		processHTTP2xxCodes(resp);
		responseStatus = SENT;

// HTTP 4xx		
	} else if (isHttpCode4xx(resp)) {	
		processHTTPErrorCodes(resp);	
		responseStatus = ERROR;
		
// HTTP 5xx		
	} else if (isHttpCode5xx(resp)) {			
		processHTTPErrorCodes(resp);
		responseStatus = ERROR;		

// HTTP 3xx and others		
	} else {	
		logger.error(&quot;HTTP response status code is unknown: &quot; + resp);
		responseStatus = ERROR;	
	}
	
} catch(ex) {
	logger.info(&quot;Exception: &quot; + ex);
}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>1</sequenceNumber>
            <name>HTTP 2xx Codes</name>
            <script>function processHTTP2xxCodes(resp) {

	var log = new Packages.java.util.ArrayList();

	if (resp.contains(&apos;200&apos;)) {

		var jsonResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);
		
		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var conf = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.Conformance, jsonResp);

		if (conf != null) {
			log.add(&quot;Conformance statement: &quot; + conf.getName());
			log.add(&quot;Status: &quot; + conf.getStatus());

			var rest = conf.getRest();

			var security = rest.get(0).getSecurity();
			if (!security.isEmpty()) {
				log.add(&quot;++++++ Security ++++++&quot;);
				log.add(&quot;CORS headers: &quot; + security.getCors().toString());
			}

			var resources = rest.get(0).getResource();		
			for (var i=0; i &lt; resources.size(); i++) {
				log.add(&quot;------ &quot; + resources.get(i).getType() + &quot; ------&quot;);
				var search = resources.get(i).getSearchParam();
				
				if (!search.isEmpty()) {
					for (var j=0; j &lt; search.size(); j++) {
						log.add(search.get(j).getName() + &quot; -- &quot; + search.get(j).getDocumentation());
					}
				}				
			}

			// Print conformance resource			
			for (var i = log.size()-1; i &gt; -1; i--)
				logger.info(log.get(i));
			
		}

	} // 200 OK

}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTP2xxCodes(resp) {

	var log = new Packages.java.util.ArrayList();

	if (resp.contains(&apos;200&apos;)) {

		var jsonResp = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);
		
		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var conf = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.Conformance, jsonResp);

		if (conf != null) {
			log.add(&quot;Conformance statement: &quot; + conf.getName());
			log.add(&quot;Status: &quot; + conf.getStatus());

			var rest = conf.getRest();

			var security = rest.get(0).getSecurity();
			if (!security.isEmpty()) {
				log.add(&quot;++++++ Security ++++++&quot;);
				log.add(&quot;CORS headers: &quot; + security.getCors().toString());
			}

			var resources = rest.get(0).getResource();		
			for (var i=0; i &lt; resources.size(); i++) {
				log.add(&quot;------ &quot; + resources.get(i).getType() + &quot; ------&quot;);
				var search = resources.get(i).getSearchParam();
				
				if (!search.isEmpty()) {
					for (var j=0; j &lt; search.size(); j++) {
						log.add(search.get(j).getName() + &quot; -- &quot; + search.get(j).getDocumentation());
					}
				}				
			}

			// Print conformance resource			
			for (var i = log.size()-1; i &gt; -1; i--)
				logger.info(log.get(i));
			
		}

	} // 200 OK

}</string>
              </entry>
            </data>
          </step>
          <step>
            <sequenceNumber>2</sequenceNumber>
            <name>HTTP Error Codes</name>
            <script>function processHTTPErrorCodes(resp) {

	logger.info(&quot;Error response: &quot; + resp);

	// Check header&apos;s entries
	for each (seg in msg[&apos;Header&apos;].children()) {
		if (seg.name().toString() == &quot;Field&quot;) {
			logger.info(seg[&apos;Name&apos;].toString() + &quot;:  &quot; + seg[&apos;Value&apos;].toString());
		}
	}

	// Check OperationOutcome resource if present
	var jsonError = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

	if (jsonError.length &gt; 0) {
		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var conf = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.OperationOutcome, jsonError);
	
		if (!conf.isEmpty()) 
			logger.info(&quot;Error: &quot; + conf.getIssueFirstRep());
	}
}</script>
            <type>JavaScript</type>
            <data>
              <entry>
                <string>Script</string>
                <string>function processHTTPErrorCodes(resp) {

	logger.info(&quot;Error response: &quot; + resp);

	// Check header&apos;s entries
	for each (seg in msg[&apos;Header&apos;].children()) {
		if (seg.name().toString() == &quot;Field&quot;) {
			logger.info(seg[&apos;Name&apos;].toString() + &quot;:  &quot; + seg[&apos;Value&apos;].toString());
		}
	}

	// Check OperationOutcome resource if present
	var jsonError = new java.lang.String(FileUtil.decode(msg[&apos;Body&apos;].toString()), &quot;UTF-8&quot;);

	if (jsonError.length &gt; 0) {
		ctxDstu2 = globalMap.get(&quot;ctxDstu2&quot;);
		var parser = ctxDstu2.newJsonParser();
		var conf = parser.parseResource(Packages.ca.uhn.fhir.model.dstu2.resource.OperationOutcome, jsonError);
	
		if (!conf.isEmpty()) 
			logger.info(&quot;Error: &quot; + conf.getIssueFirstRep());
	}
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundDataType>XML</inboundDataType>
        <outboundDataType>XML</outboundDataType>
        <inboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </inboundProperties>
        <outboundProperties class="com.mirth.connect.plugins.datatypes.xml.XMLDataTypeProperties" version="3.4.0">
          <serializationProperties class="com.mirth.connect.plugins.datatypes.xml.XMLSerializationProperties" version="3.4.0">
            <stripNamespaces>true</stripNamespaces>
          </serializationProperties>
          <batchProperties class="com.mirth.connect.plugins.datatypes.xml.XMLBatchProperties" version="3.4.0">
            <splitType>Element_Name</splitType>
            <elementName></elementName>
            <level>1</level>
            <query></query>
            <batchScript></batchScript>
          </batchProperties>
        </outboundProperties>
      </responseTransformer>
      <filter version="3.4.0">
        <rules/>
      </filter>
      <transportName>HTTP Sender</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <waitForPrevious>true</waitForPrevious>
    </connector>
  </destinationConnectors>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
// Responses returned from here will be stored as &quot;Postprocessor&quot; in the response map
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <undeployScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</undeployScript>
  <properties version="3.4.0">
    <clearGlobalChannelMap>true</clearGlobalChannelMap>
    <messageStorageMode>DEVELOPMENT</messageStorageMode>
    <encryptData>false</encryptData>
    <removeContentOnCompletion>false</removeContentOnCompletion>
    <removeOnlyFilteredOnCompletion>false</removeOnlyFilteredOnCompletion>
    <removeAttachmentsOnCompletion>false</removeAttachmentsOnCompletion>
    <initialState>STARTED</initialState>
    <storeAttachments>false</storeAttachments>
    <tags class="linked-hash-set"/>
    <metaDataColumns>
      <metaDataColumn>
        <name>SOURCE</name>
        <type>STRING</type>
        <mappingName>mirth_source</mappingName>
      </metaDataColumn>
      <metaDataColumn>
        <name>TYPE</name>
        <type>STRING</type>
        <mappingName>mirth_type</mappingName>
      </metaDataColumn>
    </metaDataColumns>
    <attachmentProperties version="3.4.0">
      <type>None</type>
      <properties/>
    </attachmentProperties>
    <archiveEnabled>true</archiveEnabled>
    <resourceIds class="linked-hash-map">
      <entry>
        <string>Default Resource</string>
        <string>[Default Resource]</string>
      </entry>
    </resourceIds>
  </properties>
  <codeTemplateLibraries/>
</channel>